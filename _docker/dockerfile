ARG ANTLR_TOOL=antlr4-4.12.1-SNAPSHOT-complete.jar

#
# Debian - base image
#
FROM debian as base
# Prepare environment
ENV ENV=/etc/profile
#RUN cp /etc/profile.d/color_prompt.sh.disabled /etc/profile.d/color_prompt.sh

# Install Base
RUN apt update
#RUN apk upgrade
RUN apt --yes install wget curl unzip tree nano git python3 pip lsof

#
# antlr4 - Build
#
FROM base as build_antlr4
# build antlr tool based on antlr fork:
# https://github.com/HSorensen/antlr4.git
# Result is the antlr-tool in /opt/antlr4/tool/target/antlr4-4.7.2-SNAPSHOT-complete.jar

# Install Java and Maven needed to build antlr
RUN apt --yes install openjdk-11-jdk maven

# Prepare runtime enviroment
RUN mkdir /opt/antlr4

# Build antlr tool
# See https://github.com/antlr/antlr4/blob/master/doc/building-antlr.md
RUN git clone -b lexerinclude --single-branch https://github.com/HSorensen/antlr4.git /opt/antlr4
RUN cd /opt/antlr4 && mvn -DskipTests install --projects tool --also-make >mvn-install.log
# Antlr Tool is in /opt/antlr4/tool/target/antlr4-4.7.2-SNAPSHOT-complete.jar
# run with: java  -jar ./antlr4-4.7.2-SNAPSHOT-complete.jar


#
# antlr4 - Runtime
#
FROM base as gccpli-dev
ARG ANTLR_TOOL

# Prepare runtime
COPY --from=build_antlr4 /opt/antlr4/tool/target/${ANTLR_TOOL} /usr/local/lib/${ANTLR_TOOL}

# Install Java
RUN apt --yes install openjdk-11-jdk

# Install GCC and G++
RUN apt --yes install gcc g++ gdb bison flex file texinfo make pkgconf util-linux uuid-dev nano linux-headers-amd64
# Install latest version of cmake
RUN pip install cmake

# Setup runtime alias and classpath
RUN echo "alias antlr4='java -jar /usr/local/lib/${ANTLR_TOOL}'" > /etc/profile.d/antlr4_alias.sh \
 && echo "alias grun='java org.antlr.v4.gui.TestRig'" >> /etc/profile.d/antlr4_alias.sh \
 && echo "export CLASSPATH='.:/usr/local/lib/${ANTLR_TOOL}:$CLASSPATH'" >> /etc/profile.d/antlr4_alias.sh

COPY src-antlr /src-antlr

# Build gpli parser: compile src-parser/main.cpp
RUN mkdir -p /src-antlr/build && cd /src-antlr/build && cmake ../src-parser
RUN cd /src-antlr/build && make -j 2 antlr4_runtime-build_static

# Build gpli from main.cpp
RUN cd /src-antlr/build && make -j 2
# Generated executable is buildfolder/gpli
# Install into /usr/local/bin
RUN cd /src-antlr/build && make install

# -------
# GCC Compilation
# build GNU PLI FRONTEND for the PL/I programming language
# See https://thinkingeek.com/2016/01/06/tiny-gcc-front-part-2/
# -------
# Copy frontend project source code
COPY src-gcc /src-gcc
COPY src-gcc-gpli /src-gcc/gcc/gpli
COPY src-gcc-tiny /src-gcc/gcc/tiny

# Create build and install folders
RUN mkdir gcc-build gcc-install

# Build c and c++ from source
RUN cd src-gcc && ./contrib/download_prerequisites 
RUN cd gcc-build && ../src-gcc/configure --prefix=/gcc-install --disable-multilib --enable-languages=c,c++,gpli,tiny
RUN cd gcc-build && make -j 3
RUN cd gcc-build && make -j 3 install
