 /***  ENTERPRISE NATIONALS  1985  ***/
 /*  DAYCALC - CALCULATE RESULTS FOR A RACE AND UPDATE FILES ACCORDINGLY  */
 /*  RACE FILE IN FINISH POSN. SEQUENCE, RESULTS FILE AS NORMAL (SAIL SEQ.)*/

 /* KEEP UNTIL PENALTY METHOD RESOLVED - THEN DELETE IF NOT REQD. */

DAYCALC:  PROC OPTIONS(MAIN);
  %INCLUDE 'DCLRACE.PLI';
  %INCLUDE 'DCLRESLT.PLI';
  %INCLUDE 'DCLTABLE.PLI';

  DCL COPY_RIGHT  CHAR(20) STATIC INIT('(C) P.NORRIE - 1985');

  DCL TITLES (6) CHAR(9) STATIC INIT('RACE1.SRT','RACE2.SRT','RACE3.SRT',
	 'RACE4.SRT','RACE5.SRT','RACE6.SRT');
  DCL TITLVAR  CHAR(9) STATIC;
  DCL OLD_FINPOSN DEC FIXED(3) STATIC INIT(0);
  DCL OLD_POSN	  DEC FIXED(3) STATIC INIT(0);
  DCL OLD_PTS	  DEC FIXED(6,3) STATIC INIT(0);
  DCL INDEC  DEC FIXED(3) STATIC;
  DCL RECCNT DEC FIXED(3) STATIC INIT(0);
  DCL KEYFLD DEC FIXED(3) STATIC INIT(0);
  DCL MAXREC DEC FIXED(3) STATIC INIT(150);
  DCL RACENO DEC FIXED(1) STATIC INIT(0);
  DCL I      BIN FIXED(15) STATIC;
  DCL RACE_PTS	DEC FIXED(6,3) STATIC;
  DCL RACE_POSN DEC FIXED(3) STATIC;
  DCL WORK	DEC FIXED(5,2) STATIC;
  DCL RACE   FILE;
  DCL RESULT FILE;
  DCL TABLE  FILE;

INIT:
  ON ERROR PUT SKIP LIST('ONCODE=',ONCODE());
  ON ENDFILE(RACE) GO TO EOJ;
  PUT SKIP LIST('RACE RESULTS CALCULATION');
  OPEN FILE(TABLE) SEQUENTIAL KEYED RECORD INPUT ENV(F(128))
       TITLE('START.TAB');
  READ FILE(TABLE) INTO(RACE_TABLE);
INIT2:
  PUT SKIP LIST('ENTER RACE NUMBER - ');
  GET LIST(RACENO);
  IF RACENO < 1 ! RACENO > 6  THEN DO;
    PUT SKIP LIST('RACE NO. NOT 1 TO 6');
    GO TO INIT2;
  END;
  TITLVAR = TITLES(RACENO);
  OPEN FILE(RACE) DIRECT RECORD KEYED UPDATE ENV(F(128),BUFF(1024))
       TITLE(TITLVAR);
  OPEN FILE(RESULT) DIRECT RECORD KEYED UPDATE ENV(F(128),BUFF(1024))
       TITLE('OVERALL.DATA');


MAIN:
  READ FILE(RACE) INTO(RACE_INFO) KEY(KEYFLD); /* FINISH POSN. SEQUENCE    */
  RECCNT = RECCNT + 1;
  /* READ RESULTS FILE USING KEY HELD IN RACE RECORD.  THIS WAS KEY SET UP */
  /* WHEN RACE FILE WAS IN SAIL NO. SEQUENCE.  THIS SHOULD PRODUCE RESULTS */
  /* RECORD FOR SAME YACHT						   */
  READ FILE(RESULT) INTO(OVERALL_RESULTS) KEY(RACE_RECNO);
  IF SAIL_NO ~= R_SAIL	THEN DO;
    PUT SKIP LIST('LOGIC OR SORT ERROR');
    GO TO EOJ;
  END;
  IF FINISH_TYPE = 'FIN' ! FINISH_TYPE = 'PMS'  THEN DO;
    CALL FINCALC;	   /* CALCULATE POSITION & POINTS */
    IF PENALTY ~= 0  THEN CALL PENCALC;   /* CALC. EFFECT OF PENALTY */
  END;
  ELSE CALL BADCALC;	   /* CALC. POSN & POINTS FOR DNS/RTD/DSQ */
  CALL FILEUPD; 	   /* REWRITE RECORDS TO RACE & RESULTS FILES */
  KEYFLD = KEYFLD + 1;
  IF KEYFLD = MAXREC	   /* MAX NO. OF YACHTS */
    THEN GO TO EOJ;
  GO TO MAIN;		   /* PROCESS NEXT YACHT */


 /**  PROC TO CALCULATE POINTS & POSITION FOR FINISHED YACHTS  **/
FINCALC:  PROC;
  IF RECCNT = 1  THEN DO;
     RACE_PTS  = 0.75;
     RACE_POSN = 1;
     OLD_PTS	 = 0.75;
     OLD_POSN = 1;
     OLD_FINPOSN = 1;
     GO TO FIN2;	 /* UPDATE INFO ON RACE AND RESULTS FILES */
  END;
  IF FIN_POSN = OLD_FINPOSN  THEN DO;	 /* EQUAL POSITION TO PREVIOUS BOAT */
     RACE_PTS = OLD_PTS;
     RACE_POSN = OLD_POSN;
     GO TO FIN2;	 /* UPDATE	  */
  END;
  RACE_POSN = RECCNT;
  RACE_PTS  = RECCNT;
  OLD_FINPOSN = FIN_POSN;   /* SAVE FOR COMPARISON WITH NEXT RECORD */
FIN2:
  PRE_POSN  = RACE_POSN;      /* FILL FIELDS IN RACE & RESULTS FILES */
  FIN_POSN  = RACE_POSN;
  POINTS    = RACE_PTS;
  R_POSN(RACENO) = RACE_POSN;
  R_POINTS(RACENO) = RACE_PTS;
  R_FINTYPE(RACENO) = FINISH_TYPE;
  RETURN;
END;   /* END PROC FINCALC */


 /** PROC TO CALC. POINTS AND POSITIONS FOR NON-FINISHERS **/
BADCALC:  PROC;
  IF FINISH_TYPE = 'RTD' ! FINISH_TYPE = 'DNF'  THEN DO;
    RACE_PTS = ENTRIES(RACENO);
    RACE_POSN = ENTRIES(RACENO);
  END;
  ELSE IF FINISH_TYPE = 'DNS'  !  FINISH_TYPE = 'DSQ'  THEN DO;
	 RACE_PTS = ENTRIES(RACENO) + 10;
	 RACE_POSN = ENTRIES(RACENO) + 1;
       END;
  ELSE DO;
	 PUT SKIP LIST('INVALID FINISH TYPE - YACHT ',SAIL_NO);
	 GO TO EOJ;
       END;
			  /*  UPDATE RACE FILE */
  FIN_POSN = RACE_POSN;
  POINTS   = RACE_PTS;
  R_FINTYPE(RACENO) = FINISH_TYPE;   /* UPDATE OVERALL RESULTS FILE */
  R_POSN(RACENO)    = RACE_POSN;
  R_POINTS(RACENO)  = RACE_PTS;
  RETURN;
END;  /* END BADCALC */

 /** PROC TO CALCULATE POSITIONS/POINTS OF YACHTS WITH PENALTIES **/
PENCALC:   PROC;
  WORK = RACE_POSN + (ENTRIES(RACENO) * PENALTY/100); /* ADD RELEVANT % OF NO. OF  */
					      /* ENTRANTS		   */
  RACE_POSN = WORK + 0.5;    /* ROUND TO NEAREST WHOLE NUMBER (UP FOR 0.5) */
  IF RACE_POSN > ENTRIES(RACENO)
    THEN RACE_POSN = ENTRIES(RACENO) + 1;
  RACE_PTS = RACE_POSN;
  R_POSN(RACENO)   = RACE_POSN;        /* UPDATE FIELDS IN RESULTS*/
  R_POINTS(RACENO) = RACE_PTS;	       /*  & RACE FILES 	  */
  FIN_POSN	 = RACE_POSN;
  POINTS	 = RACE_PTS;
  RETURN;
END;   /* END PROC PENCALC */

 /** PROC TO REWRITE RECORDS TO RACE & RESULT FILES **/
FILEUPD:  PROC;
  WRITE FILE(RACE) FROM(RACE_INFO) KEYFROM(KEYFLD);
  WRITE FILE(RESULT) FROM(OVERALL_RESULTS) KEYFROM(RACE_RECNO);
  RETURN;
END;

 /** END OF JOB **/
EOJ:
  PUT SKIP LIST('RACE CALC. PROGRAM ENDED - YACHTS PROCESSED = ',RECCNT);
END;





