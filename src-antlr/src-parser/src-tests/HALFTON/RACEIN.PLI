 /***  ENTERPRISE NATIONAL CHAMPIONSHIPS  ***/
 /*  PROGRAM TO UPDATE RACE DATA FILES	-  REPLACES RACEUPD PGM IN HALF TON SUITE   */
 /*  READ INPUT FROM EDITED RACE DATA.	MATCH AGAINST BOAT INFO. FILE.	*/
 /*  USE DATA FROM BOTH FILES TO CREATE RACE FILES (RACEn.DAT)		*/

RACEIN:  PROC OPTIONS(MAIN);

 DCL COPY_RIGHT CHAR(20) STATIC INIT('(C) P.NORRIE 1985');
 %INCLUDE 'DCLIN.PLI';      /* EDITED RACE INPUT   */
 %INCLUDE 'DCLRACE.PLI';    /* RACE FILE STRUCTURE */
 %INCLUDE 'DCLINFO.PLI';    /* YACHTS INFO. FILE   */

 DCL  RACE  FILE;
 DCL  YACHTS FILE;
 DCL  IN     FILE;
 DCL  AREA  CHAR(82) VARYING;	/* INPUT AREA FOR EDITED DATA */
 DCL  AREA2 CHAR(80) STATIC;	/* INTERMEDIATE AREA	      */
 DCL  AREA3 CHAR(80) BASED(P);	/* DATA AFTER TAB CHARS REMOVED */
 DCL  P     POINTER;

 DCL  WORK  CHAR(10) STATIC;
 DCL  WORK1 CHAR(1)  STATIC;
 DCL  WORK2 CHAR(2) STATIC;
 DCL  WORK4 CHAR(4) STATIC;
 DCL  WORK8 CHAR(8) STATIC;
 DCL  HEX09  BIT(8) STATIC INIT('09'B4); /* TAB CHARACTER  */
 DCL  HEXWRK CHAR(1) BASED(Q);		 /* OVERLAYS HEX09 */
 DCL  Q      POINTER;
 DCL  HEXCR   BIT(8) STATIC INIT('0D'B4);  /* CR           */
 DCL  HEXLF   BIT(8) STATIC INIT('0A'B4);  /* LINE FEED    */
 DCL  HEXWRK2 CHAR(1) BASED(R);
 DCL  HEXWRK3 CHAR(1) BASED(S);
 DCL  R  POINTER;
 DCL  S  POINTER;
      Q = ADDR(HEX09);
      R = ADDR(HEXCR);
      S = ADDR(HEXLF);
 DCL  TABS (10) DEC FIXED(3) STATIC INIT(9,17,25,33,41,49,57,65,73,81);
 DCL  NUM  CHAR(10) STATIC INIT('0123456789');
 DCL  FINISH_STATUS (5) CHAR(3) STATIC INIT('PMS','DNS','RTD','DSQ','FIN');

 DCL  SAIL_ARR (150) CHAR(5) STATIC;
 DCL  RECNO_ARR (150) BIN FIXED(15) STATIC;
 DCL  FOUND_ARR (150) CHAR(1) STATIC;

 DCL  POSN  DEC FIXED(3) STATIC INIT(0);
 DCL  MAXREC	DEC FIXED(3) STATIC INIT(150);
 DCL  EQCNT	DEC FIXED(3) STATIC INIT(0);
 DCL  BOATS	DEC FIXED(3) STATIC INIT(0);

 DCL  (I,J,K,L,M)  BIN FIXED(15) STATIC;
 DCL  KEYFLD BIN FIXED(15) STATIC;
 DCL  RACENO BIN FIXED(15) STATIC;
 DCL  FOUND  BIT(1) STATIC INIT('0'B);
 DCL  CNT    BIN FIXED(15) STATIC INIT(0);

 DCL  TITLES (6) CHAR(10) STATIC INIT('RACE1.DATA','RACE2.DATA','RACE3.DATA','RACE4.DATA',
	 'RACE5.DATA','RACE6.DATA');
 DCL  TITLIN (6) CHAR(8)  STATIC INIT('RACE1.IN','RACE2.IN','RACE3.IN','RACE4.IN',
	 'RACE5.IN','RACE6.IN');
 DCL  TITLVAR  CHAR(10) STATIC;

INIT:
  P = ADDR(IN_STRUCT);	 /* OVERLAY DATA AREA ON STRUCTURE */
  ON ERROR PUT SKIP LIST('ONCODE=',ONCODE(),'SAIL',IN_SAIL);
  ON ENDFILE(IN) GO TO EOJ;
  ON ENDFILE(YACHTS) GO TO INIT2;
  CALL RACEP;	 /* PICK UP RACE NUMBER AND VET IT */
  CALL SCAN;	 /* SCAN INFO FILE - SAVE SAIL NOS. IN TABLE */
INIT2:
  CLOSE FILE(YACHTS);
  DO I = CNT+1 TO 150;
    SAIL_ARR(I) = '     ';
  END;
  OPEN FILE(YACHTS) DIRECT KEYED INPUT RECORD ENV(F(128),BUFF(1024))
       TITLE('YACHTS.INF');
MAIN:
  CALL READIN;	/* READ EDITED INPUT FOR A VALID BOAT RECORD */
  CALL FIND;	/* LOOK FOR MATCHING RECORD ON INFO FILE */
MAIN2:
  IF ~ FOUND  THEN DO;
    PUT SKIP LIST('^GBOAT NOT FOUND ON INFO. FILE');
    PUT SKIP LIST('SAIL NUMBER - ',IN_SAIL);
    GO TO MAIN;  /* NEXT RECORD */
  END;
  CALL BUILD;	 /* BUILD RACE RECORD FROM INFO. AND RACE INPUT FILES */
  CALL RECOUT;	 /* WRITE RECORD TO RACEn.DAT */
  BOATS = BOATS + 1;
  GO TO MAIN;	 /* NEXT BOAT */


/** PICK UP RACE NUMBER & CHECK IT.  OPEN REQD. RACE AND INPUT FILES - 1 TO 6 */
RACEP:	PROC;
RP1:
  PUT SKIP LIST('ENTER RACE NUMBER - 1 TO 6 - ');
  GET LIST(RACENO);
  IF RACENO < 1 ! RACENO > 6  THEN DO;
    PUT SKIP LIST('^GRACE NO. INVALID');
    GO TO RP1;
  END;
  TITLVAR = TITLES(RACENO);
  OPEN FILE(RACE) RECORD KEYED SEQUENTIAL OUTPUT ENV(F(128),BUFF(4096))
       TITLE(TITLVAR);
  TITLVAR = TITLIN(RACENO);
  OPEN FILE(IN) STREAM INPUT ENV(BUFF(1024)) TITLE(TITLVAR);
  RETURN;
  END;	/* END PROC RACEP */


/** READ ALL RECORDS ON YACHTS.INF - STORE SAIL NOS. AND RECORD NOS. **/
SCAN:  PROC;
  DO I = 1 TO 150;
    FOUND_ARR(I) = ' ';
  END;
  OPEN FILE(YACHTS) SEQUENTIAL RECORD INPUT KEYED ENV(F(128),BUFF(4096))
       TITLE('YACHTS.INF');
SCAN1:
  READ FILE(YACHTS) INTO(BOAT_INFO);
  CNT = CNT + 1;
  SAIL_ARR(CNT) = SAIL;
  RECNO_ARR(CNT) = CNT - 1;
  GO TO SCAN1;
  RETURN;
  END;	      /* END PROC SCAN */


/** PROCEDURE READIN - READ EDITED RACE DATA TO PICK OUT NEXT BOAT RECORD */
/*  REMOVE TAB CHARACTERS TO OBTAIN REQURED INPUT FORMAT		  */
READIN:  PROC;
READ1:
  AREA = ' ';
  READ FILE(IN) INTO(AREA);
  AREA2 = AREA;
  IF SUBSTR(AREA2,1,1) = HEXWRK2   /* CRLF -> BLANK LINE */
    THEN IF SUBSTR(AREA2,2,1) = HEXWRK3
	   THEN GO TO READ1;		  /* IGNORE AND READ NEXT RECORD */
  J = 1;
  DO I = 1 TO 80;    /* SCAN AREA2 WHICH CONTAINS INPUT WITH TAB CHARS */
		     /* I = POSN. IN AREA2, J = POSN. IN AREA3	       */
READ2:
     WORK1 = SUBSTR(AREA2,I,1);
     IF WORK1 ~= HEXWRK  THEN DO;    /* NOT TAB CHAR. */
	SUBSTR(AREA3,J,1) = WORK1;   /* MOVE TO AREA3 */
	J = J + 1;
	GO TO READ3;  /* END OF LOOP - CHECK NEXT POSN. */
     END;
     /* TAB CHAR. FOUND - PAD AREA3 WITH REQD. NO. OF BLANKS */
     DO K = 1 TO 10;	   /* SCAN TAB POSNS. TABLE TO FIND NEXT POSN.*/
	IF J < TABS(K)	THEN DO;
	   DO M = J TO TABS(K)-1;
	      SUBSTR(AREA3,M,1) = ' ';
	   END;
	   J = TABS(K);    /* NEXT POSN. */
	   GO TO READ3;    /* END OF LOOP */
	END;
     END;
READ3:
     IF J > 80 THEN GO TO READ4;   /* EXIT FROM LOOP EVEN IF HAVE NOT COMPLETED SCAN */
  END;	  /* END OF SCAN LOOP */

READ4:
  IF IN_SAIL = '     '  ! IN_SAIL = 'ENTER' ! IN_SAIL = 'SAIL '  /* NOT DATA LINE */
    THEN GO TO READ1;				    /* READ NEXT RECORD */

  /* RIGHT-JUSTIFY SAIL NO. - 5 CHARS - IN FIELD IN_SAIL */
  DO I = 1 TO 4;
    IF SUBSTR(IN_SAIL,5,1) = ' '
      THEN IN_SAIL = ' '!!IN_SAIL;
  END;
  RETURN;
END;   /* END PROCEDURE READIN */


/** PROCEDURE FIND - READ INFO. FILE TO FIND REQD. YACHT **/
FIND:  PROC;
  DO I = 1 TO CNT;
     IF IN_SAIL = SAIL_ARR(I)
       THEN DO;
	      IF FOUND_ARR(I) ~= ' '  THEN DO;   /* THIS SAIL NO. ALREADY PROCESSED */
		 PUT SKIP LIST('^GDUPLICATE SAIL NO. ON EDIT FILE',IN_SAIL);
		 PUT SKIP LIST('CORRECT AND RERUN');
	      END;
	      ELSE FOUND_ARR(I) = 'Y';
	      READ FILE(YACHTS) INTO(BOAT_INFO) KEY(RECNO_ARR(I));
	      FOUND = '1'B;
	      GO TO FINDEND;
	    END;
  END;
  FOUND = '0'B;         /* BOAT NOT FOUND ON YACHTS.INF */
FINDEND:
  RETURN;
  END;	/* END PROC FIND */


/** PROCEDURE RECOUT - WRITE RECORD TO RACEn.DAT **/
RECOUT:  PROC;
  WRITE FILE(RACE) FROM(RACE_INFO);
  RETURN;
END;  /* END PROC RECOUT */


/** PROC BUILD - BUILD RECORD FOR BOAT FROM INFO. AND EDITED RACE FILES **/
BUILD:	PROC;
  CTRY_CODE = ' ';
  SAIL_NO   = IN_SAIL;
  BOAT_NAME = NAME;
  RACE_FLAG1 = FLAG1;
  RACE_FLAG2 = FLAG2;
  IF IN_STATUS = ' '  THEN FINISH_TYPE = 'FIN';
  ELSE FINISH_TYPE = IN_STATUS;
  IF FINISH_TYPE ~= 'FIN'  THEN DO;     /* NOT VALID FINISHER */
     PRE_POSN = 999;
     FIN_POSN = 999;
     EQUAL_FLAG = ' ';
     GO TO BUILD2;
  END;
  IF IN_EQUAL = 'EQ'  THEN DO;
     EQUAL_FLAG = '*';
     IF EQCNT = 0  THEN DO;    /* FIRST OF EQUAL BOATS IN THIS GROUP */
	EQCNT = 1;
	POSN = POSN + 1;
	PRE_POSN = POSN;
     END;
     ELSE DO;
	EQCNT = EQCNT + 1;
	PRE_POSN = POSN;
     END;
  END;
  ELSE DO;
     EQUAL_FLAG = ' ';
     POSN = POSN + EQCNT - 1;	   /* ALLOW FOR PREVIOUS EQUQL BOATS */
     PRE_POSN = POSN;
     EQCNT = 0;
  END;
BUILD2:
  PR = IN_PROTEST;
  IF IN_PEN = ' '  THEN PENALTY = 0;
  ELSE PENALTY = DECIMAL(IN_PEN,2,0);
  FIN_POSN = PRE_POSN;	      /* VALUE MEANTIME - MAY CHANGE LATER */
  POINTS = 0;
  RACE_RECNO = RECNO;	  /* RECORD NO. IF IN SAIL NO. SEQUENCE */

  RETURN;
  END;	/* END PROC BUILD */


EOJ:
  CLOSE FILE(RACE);
  CLOSE FILE(YACHTS);
  CLOSE FILE(IN);
  PUT SKIP LIST('RACE FILE ',RACENO,'BUILT');
  PUT SKIP LIST('NO. OF BOATS = ',BOATS);

  END;


