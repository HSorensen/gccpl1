 /***  ENTERPRISES 1985  ***/
 /*  DAYCALC - CALCULATE FINAL POSITIONS FOR A RACE TAKING PENALTIES	   */
 /*  INTO ACCOUNT.  N.B. - THIS CODE USES ENTERPRISE ASSOCIATION METHOD OF */
 /*  CALCULATION - NOT IYRU RECOMMENDED ONE.				   */
 /*  INPUT  - RACEn.DAT - RACE FILE IN POSITION SEQUENCE.		   */
 /*	    - OVERALL.DAT - RESULTS FILE				   */
 /*	    - START.TAB   - TABLE FILE					   */
 /*  OUTPUT - RACEn.UPD - RACE FILE WITH FINAL POSNS. & POINTS (UNSORTED)  */
 /*	    - UPDATED RESULTS FILE					   */

DAYCALC:  PROC OPTIONS(MAIN);
  %INCLUDE 'DCLRACE.PLI';
  %INCLUDE 'DCLRESLT.PLI';
  %INCLUDE 'DCLTABLE.PLI';

  DCL COPY_RIGHT  CHAR(20) STATIC INIT('(C) P.NORRIE - 1985');

  DCL FINSAIL (150) CHAR(5) STATIC;  /* TABLE OF UNPENALISED BOATS */
  DCL PENSAIL (50)  CHAR(5) STATIC;  /* TABLE OF PENALISED BOATS   */
  DCL FINCNT BIN FIXED(15) STATIC INIT(0);
  DCL PENCNT BIN FIXED(15) STATIC INIT(0);

  DCL TITLES (6) CHAR(9) STATIC INIT('RACE1.DAT','RACE2.DAT',
	 'RACE3.DAT','RACE4.DAT','RACE5.DAT','RACE6.DAT');
  DCL TITLVAR  CHAR(9) STATIC;
  DCL TITLES2 (6) CHAR(9) STATIC INIT('RACE1.UPD','RACE2.UPD',
	 'RACE3.UPD','RACE4.UPD','RACE5.UPD','RACE6.UPD');
  DCL TITL2   CHAR(9) STATIC;

  DCL EQCNT  DEC FIXED(3) STATIC INIT(0);
  DCL INDEC  DEC FIXED(3) STATIC;
  DCL RECCNT DEC FIXED(3) STATIC INIT(0);
  DCL KEYFLD DEC FIXED(3) STATIC INIT(0);
  DCL MAXREC DEC FIXED(3) STATIC INIT(150);
  DCL RACENO DEC FIXED(1) STATIC INIT(0);
  DCL I      BIN FIXED(15) STATIC;
  DCL RACE_PTS	DEC FIXED(6,3) STATIC;
  DCL RACE_POSN DEC FIXED(3) STATIC;
  DCL WORK	DEC FIXED(7,2) STATIC;
  DCL WORKINT	DEC FIXED(3) STATIC;
  DCL RACE    FILE;
  DCL RACEOUT FILE;
  DCL RESULT  FILE;
  DCL TABLE   FILE;

INIT:
  ON ERROR PUT SKIP LIST('ONCODE=',ONCODE());
  PUT SKIP LIST('RACE PENALTIES AND POINTS CALCULATION');
  OPEN FILE(TABLE) SEQUENTIAL KEYED RECORD INPUT ENV(F(128))
       TITLE('START.TAB');
  READ FILE(TABLE) INTO(RACE_TABLE);
INIT2:
  PUT SKIP LIST('ENTER RACE NUMBER - ');
  GET LIST(RACENO);
  IF RACENO < 0 ! RACENO > 6  THEN DO;
    PUT SKIP LIST('^GRACE NO. NOT 1 TO 6');
    GO TO INIT2;
  END;
  TITLVAR = TITLES(RACENO);
  TITL2   = TITLES2(RACENO);
  OPEN FILE(RACE) SEQUENTIAL RECORD KEYED INPUT ENV(F(128),BUFF(4096))
       TITLE(TITLVAR);
  OPEN FILE(RACEOUT) DIRECT RECORD KEYED OUTPUT ENV(F(128),BUFF(4096))
       TITLE(TITL2);
  OPEN FILE(RESULT) DIRECT RECORD KEYED UPDATE ENV(F(128),BUFF(1024))
       TITLE('OVERALL.DATA');

MAIN:
  CALL SCAN;	    /* SCAN RACE FILE AND PUT BOATS INTO TABLES OF PENALISED */
		    /* OR NORMAL FINISHES */
  CLOSE FILE(RACE);
  ON ENDFILE(RACE) BEGIN;
     PUT SKIP LIST('ENDFILE RACE - LOGIC ERROR');
     GO TO EOJ;
  END;
  OPEN FILE(RACE) SEQUENTIAL RECORD KEYED INPUT ENV(F(128),BUFF(4096))
     TITLE(TITLVAR);

  DO I = 1 TO PENCNT;
MAIN1:
     READ FILE(RACE) INTO(RACE_INFO);
     IF SAIL_NO ~= PENSAIL(I)
       THEN GO TO MAIN1;
     CALL PENCALC;     /* CALCULATE NEW POSN. FOR PENALISED BOAT */
     CALL FILEUPD;     /* WRITE OUT REQD. RECORDS */
  END;
  CLOSE FILE(RACE);
  OPEN FILE(RACE) SEQUENTIAL RECORD KEYED INPUT ENV(F(128),BUFF(4096))
     TITLE(TITLVAR);

  DO I = 1 TO FINCNT;
MAIN2:
     READ FILE(RACE) INTO(RACE_INFO);
     IF FINSAIL(I) ~= SAIL_NO  THEN GO TO MAIN2;
     IF FINISH_TYPE = 'FIN'
       THEN CALL FINCALC;   /* CALC. NEW POSN. AND POINTS FOR BOAT WHICH */
			    /* FINISHED CORRECTLY */
     ELSE CALL BADCALC;     /* CALC. NEW POSN. AND POINTS FOR BOAT WHICH */
			    /* WAS DSQ, RTD. ETC. */
     CALL FILEUPD;	    /* WRITE REQD. RECORDS TO FILES */
  END;

  GO TO EOJ;		    /* END MAIN LOGIC */


/** READ RACE FILE AND PUT SAIL NOS. INTO TABLES OF PENALISED AND UNPENALISED BOATS **/
SCAN:  PROC;
  ON ENDFILE(RACE) GO TO SCAN2;
  DO I = 1 TO MAXREC;
     READ FILE(RACE) INTO(RACE_INFO);
     IF PENALTY = 0  THEN DO;
	FINCNT = FINCNT + 1;
	FINSAIL(FINCNT) = SAIL_NO;
     END;
     ELSE DO;
	PENCNT = PENCNT + 1;
	IF PENCNT > 50	THEN DO;
	  PUT SKIP LIST('MORE THAN 50 PENALTIES - ALTER TABLE AND RERUN');
	  GO TO EOJ;
	END;
	PENSAIL(PENCNT) = SAIL_NO;
     END;
  END;
  CLOSE FILE(RACE);
SCAN2:
  DO I = FINCNT+1 TO MAXREC;
     FINSAIL(I) = '     ';
  END;
  DO I = PENCNT+1 TO 50;
     PENSAIL(I) = '     ';
  END;
  RETURN;
END;	  /* END PROC SCAN */



 /**  PROC TO CALCULATE POINTS & POSITION FOR FINISHED YACHTS  **/
FINCALC:  PROC;
  IF EQUAL_FLAG = ' '  THEN DO;         /* NOT EQUAL POSN. TO ANOTHER BOAT */
     EQCNT = 0;
     RACE_POSN = FINCNT;    /* POSN IN TABLE OF NON-PENALISED BOATS */
     IF FINCNT = 1
       THEN RACE_PTS = 0.75;
     ELSE RACE_PTS = RACE_POSN;
     GO TO FIN2;
  END;
  EQCNT = EQCNT + 1;	     /* EQUAL POSN. TO OTHER BOAT(S) - COUNT HOW MANY */
  RACE_POSN = FINCNT - EQCNT + 1;
  IF EQCNT = FINCNT	     /* FIRST 2 OR MORE BOATS EQUAL */
    THEN RACE_PTS = 0.75;
  ELSE RACE_PTS = RACE_POSN;
FIN2:
  FIN_POSN  = RACE_POSN;      /* FILL FIELDS IN RACE & RESULTS FILES */
  POINTS    = RACE_PTS;
  R_POSN(RACENO) = RACE_POSN;
  R_POINTS(RACENO) = RACE_PTS;
  R_FINTYPE(RACENO) = FINISH_TYPE;
  RETURN;
END;   /* END PROC FINCALC */


 /** PROC TO CALC. POINTS AND POSITIONS FOR NON-FINISHERS **/
BADCALC:  PROC;
  WORK = ENTRIES(RACENO);		   /* NO. OF ENTRANTS */
  WORK = WORK * 30 / 100;		   /* 30% OF ENTRANTS */
  WORKINT = CEIL(WORK); 	/* ROUND UP TO NEXT WHOLE NO. */
  IF FINISH_TYPE = 'RTD'  THEN DO;
    RACE_PTS = ENTRIES(RACENO) + 1; /* NO. OF ENTRIES IN THAT RACE */
				    /* PICKED UP FROM TABLE FILE   */
    RACE_POSN = RACE_PTS;
  END;
  ELSE IF FINISH_TYPE = 'DNS'  THEN DO;  /* TREAT AS DSQ - CHECK THIS ****/
	 RACE_POSN = ENTRIES(RACENO) + WORKINT;
	 RACE_PTS  = RACE_POSN;
       END;
  ELSE IF FINISH_TYPE = 'DSQ' ! FINISH_TYPE = 'PMS'   THEN DO;
	  RACE_POSN = ENTRIES(RACENO) + WORKINT;
	  RACE_PTS  = RACE_POSN;
       END;
  ELSE DO;
	 PUT SKIP LIST('INVALID FINISH TYPE - YACHT ',SAIL_NO);
	 GO TO EOJ;
       END;
  FIN_POSN = RACE_POSN; 	      /* UPDATE RACE FILE */
  POINTS   = RACE_PTS;
  R_FINTYPE(RACENO) = FINISH_TYPE;   /* UPDATE OVERALL RESULTS FILE */
  R_POSN(RACENO)    = RACE_POSN;
  R_POINTS(RACENO)  = RACE_PTS;
  RETURN;
END;  /* END BADCALC */


 /** PROC TO CALCULATE POSITIONS/POINTS OF YACHTS WITH PENALTIES **/
 /*  PROCESS EACH RECORD ON RACE FILE WITH AN ENTRY IN PENALTY TABLE */
PENCALC:  PROC;
   WORK = PRE_POSN + (ENTRIES(RACENO) * PENALTY/100);
	      /* ADD RELEVANT % OF NO. OF STARTERS IN THIS RACE */
   RACE_POSN = WORK + 0.5;    /* ROUND TO NEAREST WHOLE NUMBER (UP FOR 0.5) */
   IF RACE_POSN > ENTRIES(RACENO)
     THEN RACE_POSN = ENTRIES(RACENO) + 1;
   RACE_PTS = RACE_POSN;
   FIN_POSN = RACE_POSN;
   POINTS   = RACE_PTS;

  /* READ RESULTS FILE USING KEY HELD IN RACE RECORD.  THIS WAS KEY SET UP */
  /* WHEN RACE FILE WAS IN SAIL NO. SEQUENCE.  THIS SHOULD PRODUCE RESULTS */
  /* RECORD FOR SAME YACHT						   */
   READ FILE(RESULT) INTO(OVERALL_RESULTS) KEY(RACE_RECNO);
   IF SAIL_NO ~= R_SAIL  THEN DO;
      PUT SKIP LIST('LOGIC OR SORT ERROR');
      GO TO EOJ;
   END;

   R_POSN(RACENO)   = RACE_POSN;	/* UPDATE FIELDS IN RESULTS */
   R_POINTS(RACENO) = RACE_PTS; 	/*    FILE		    */

   RETURN;
END;   /* END PROC PENCALC */


 /** PROC TO REWRITE RECORDS TO RESULTS FILE AND WRITE NEW RECORD TO RACEOUT **/
 /** - (FILE OF UPDATED RACE INFO.)					     **/
FILEUPD:  PROC;
  WRITE FILE(RACEOUT) FROM(RACE_INFO) KEYFROM(KEYFLD);
  KEYFLD = KEYFLD + 1;
  WRITE FILE(RESULT) FROM(OVERALL_RESULTS) KEYFROM(RACE_RECNO);
  RECCNT = RECCNT + 1;
  RETURN;
END;


 /** END OF JOB **/
EOJ:
  CLOSE FILE(RACE);
  CLOSE FILE(RACEOUT);
  CLOSE FILE(RESULT);
  PUT SKIP LIST('RACE CALC. PROGRAM ENDED - YACHTS PROCESSED = ',RECCNT);
END;


