 BASIC_GENERATOR: PROCEDURE (A,N,EDGES,B); /* BASIC_GENERATOR GENERATES A SET OF BASIC (FUNDAMENTAL) CYCLES   FROM THE VERTEX ADJACENCY MATRIX OF A CONNECTED UNDIRECTED GRAPH   WITHOUT LOOPS OR MULTIPLE EDGES. THE PROCEDURE IS A PL/1 IMPLEMENTATION   OF KEITH PATON'S ALGORITHM DESCRIBED IN CACM 12, 9 (SEPTEMBER 1969),   514-519. */  DECLARE	(A(*,*),N,EDGES) BINARY FIXED (15,0),	B(*) BIT (EDGES),	BASIC BINARY FIXED (15,0) INITIAL (0),	T BIT (N) INITIAL ('0'B),	STACK CONTROLLED BINARY FIXED (15,0),	(Z,W,J) BINARY FIXED (15,0),	PREV(N) BINARY FIXED (15,0) INITIAL ((N)0);  /* INPUTS	 A : IS AN NBY N VERTEX ADJACENCY MATRIX     N : IS THE NUMBER OF VERTICES IN THE GRAPH	 EDGES : IS THE NUMBER OF EDGES IN THE GRAPH	 OUTPUT	 B : WILL BE THE NUMBER OF BASIC CYCLES GENERATED     BASIC : IS USED TO THE INDEX THE SET OF BASIC CYCLES	        GENERATED	 T : IS USED TO KEEP TRACK OF VERTICES CURRENTLY IN THE	     SPANNING TREE	 STACK : IS A PUSHDOWN LIST USED TO HOLD THE VERTICES OF	         THE SPANNING TREE WHICH HAVE NOT YET BEEN EXAMINED	 Z : IS THE VERTEX OF THE SPANNING TREE CURRENTLY BEING	     EXAMINED	 W :  IS USED TO FIND EDGES WHICH CONNECT TO Z	 PREV : IS AN ARRAY USED IN THE PRODUCTION OF THE BASIC CYCLES	 */  /* INTIALIZATION SECTION */		B	=	       '0'B;		SUBSTR              (T,1	,1) = '1'B;		ALLOCATE STACK;		STACK = 0;		ALLOCATE STACK;		STACK = 1;		NEW_Z:			Z= STACK;			IF Z = 0 THEN RETURN;			ELSE				DO;					FREE STACK;					DO W = 2 TO N;						IF A(MIN(Z,W), MAX(Z,W)) = 1 THEN							DO;								IF SUBSTR(T,W,1) THEN									/* EDGE CONNECTING Z & W FORMS A BASIC CYCLE */									Do;										BASIC = BASIC + 1;										SUBSTR(B(BASIC), A(MAX(W,PREV(W)),											MIN(W,PREV(W))),1) = '1'B;										SUBSTR(B(BASIC), A(MAX(Z,W),MIN(Z,W)),											1) = '1'B;										A(MIN(Z,W),MAX(Z,W)) = 0;										J = Z;										DO WHILE(J <> PREV(W));											SUBSTR(B(BASIC),A(MAX(PREV(J),J),												MIN(PREV(J),J)),1) = '1'B;											J = PREV(J);										END;									END;								ELSE									/* THE EDGE CONNECTING Z AND W SHOULD BE PLACED IN TREE */									DO;										PREV(W) = Z;										SUBSTR(T,W,1) = '1'B;										ALLOCATE STACK;										STACK = W;										A(MIN(Z,W),MAX(Z,W)) = 0;									END;								END;							END;							GO TO NEW_Z;						END;					END BASIC_GENERATOR;